#Modificadores de acesso
private= Faz com que um método ou variável possa ser acessado somente de dentro da própria classe;
protected= Faz com que um método ou variável possa ser acessado somente por classes do mesmo pacote ou por subclasses da classe;
public= Faz com que uma classe, método ou variável possa ser acessado a partir de qualquer outra classe.

#Modificadores de classe, método e variável
abstract= Usada para declarar uma classe que não pode ser instanciada ou método que deve ser implementado por subclasses concretas;
class= Palavra chave para identificar uma classe;
extends= Usada para estender uma classe a outra, isto é, indicar para uma superclasse que uma subclasse está estendendo, (herança);
final=  Vimos no artigo anterior, torna impossível estender uma classe, sobrepor um método ou reiniciar uma variável;
implements= Usada para indicar a uma interface que uma classe a implementará;
interface= Palavra chave para identificar uma interface;
native= Indica que um método foi escrito em uma linguagem que só pode ser usada em uma plataforma, exemplo o C++;
new= Usada para instanciar um objeto;
static= Indica que o método ou a variável pertence a classe e não a instancia;
strictfp= Usada na frente de um método para indicar que os números de ponto flutuantes seguirão regras restritas de ponto flutuante em todas as expressões;
synchronized= Indica que um método só pode ser acessado por um seguimento de cada vez,garantindo a integridade de dados;
transient= Impede que os campos sejam serializados;
volatile= Indica que a variável pode não ficar sincronizada por ser usada em fragmentos.

#Controle de fluxo
break= Faz o fluxo sair do bloco do código onde a palavra foi inserida.
case= Executa um bloco de código dependendo da instrução switch.
continue= Faz com que o código existente após essa instrução não seja executado em um loop, indicando a próxima interação do loop.
default= Executará esse bloco de código se nenhuma das instruções switch/case for atendida.
do= Executa um bloco de código um vez e, em seguida junto com a instrução while, processa um teste para determinar se o bloco deve ser executado novamente.
else= Executa um bloco de código alternativo se uma condição if for falsa.
for= Usada para executar um loop condicional em um bloco de código.
if= Usada para executar um teste lógico verdadeiro ou falso.
instanceof= Determina se um objeto é a instancia de uma classe, superclasse ou interface.
return= Faz o fluxo sair de um método sem executar nenhum código que seja após a instrução (pode retornar uma variável opcionalmente);
switch= Indica a variável a ser confrontada com as instruções case.
while= Executa um bloco de código repetidamente, enquanto um certa condição for verdadeira.

#Tratamento de Erros
catch= Declara o bloco de código usado para tratar uma execução.
finally= Bloco de código, geralmente após uma instrução try-catch, que vai ser executado independente de que fluxo do programa for usado no tratamento de uma exceção.
throw= Usada para passar uma execução para o método que chamou o método atual.
throws= Indica o método que passará uma execução para o método que o chamou.
try= Bloco de código que será executado, podendo, porém, causar uma exceção.
assert= Avalia uma expressão condicional para verificar as alternativas do programador.

#Controle de Pacotes
import= Fala-se que é para importar pacotes ou classes para o código, o que não é verdade, veremos mais a frente.
package= Especifica a que pacote todas as classes de um arquivo fonte pertence.

#Primitivas
boolean= Verdadeiro ou Falso;
byte= Inteiro de 8 bits (com sinal);
char= Unidade Unicode (de 16 bits, sem o sinal);
double= Número de ponto flutuante com 64 bits (com sinal);
float= Número de ponto flutuante com 32 bits (com sinal);
int= Número inteiro de 32 bits (com sinal);
long= Número inteiro de 64 bits (com sinal);
short= Número inteiro de 16 bits (com sinal);

#Palavras chaves de variáveis

super= Variável de referência que diz respeito a superclasse imediata;
this= Variável de referência que diz respeito a instancia atual de um objeto;

#Palavra void para tipos retornados
void= Indica que não há um tipo de retorno para o método.


#Palavras reservadas não utilizadas
const= Não use esta palavra para declarar constantes use public static final;
goto= Não foi implementada na linguagem Java por ser considerada perigosa.